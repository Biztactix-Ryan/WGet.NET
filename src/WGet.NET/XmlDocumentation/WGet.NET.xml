<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WGet.NET</name>
    </assembly>
    <members>
        <member name="T:WGetNET.Abstractions.WinGetInfoEntry">
            <summary>
            Represents a basic winget info entry.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry.EntryName">
            <summary>
            Gets the name of the info entry.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry.RawContent">
            <summary>
            Gets the raw content of the info entry.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry.HasShortenedContent">
            <summary>
            Gets if content of the package is shortened.
            </summary>
        </member>
        <member name="P:WGetNET.Abstractions.WinGetInfoEntry.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Abstractions.WinGetInfoEntry"/> class.
            </summary>
            <param name="entryName">The name of the info entry.</param>
            <param name="rawContent">The content of the info entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
        </member>
        <member name="M:WGetNET.Abstractions.WinGetInfoEntry.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.ProcessManager">
            <summary>
            The <see langword="internal"/> class <see cref="T:WGetNET.ProcessManager"/> 
            provides the winget process execution.
            </summary>
        </member>
        <member name="M:WGetNET.ProcessManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.ProcessManager"/> class.
            </summary>
            <param name="processName">
            The name of the process to execute.
            </param>
        </member>
        <member name="M:WGetNET.ProcessManager.ExecuteWingetProcess(System.String)">
            <summary>
            Executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ExecuteWingetProcessAsync(System.String)">
            <summary>
            Asynchronous executes a winget process with the given command and returns the result.
            </summary>
            <param name="cmd">
            A <see cref="T:System.String"/> representing the command that winget should be executed with.
            </param>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.GetStartInfo(System.String)">
            <summary>
            Gets the start info for a process.
            </summary>
            <param name="cmd">
            String containig the arguments for the action.
            </param>
            <returns>
            A <see cref="T:System.Diagnostics.ProcessStartInfo"/> object, for the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.RunProcess(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Runs a process with the current start informations.
            </summary>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.RunProcessAsync(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Asynchronous runs a process with the current start informations.
            </summary>
            <returns>
            A <see cref="T:WGetNET.Models.ProcessResult"/> object, 
            containing the output an exit id of the process.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ReadSreamOutput(System.IO.StreamReader)">
            <summary>
            Reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="M:WGetNET.ProcessManager.ReadSreamOutputAsync(System.IO.StreamReader)">
            <summary>
            Asynchronous reads the data from the process output to a string array.
            </summary>
            <param name="output">
            The <see cref="T:System.IO.StreamReader"/> with the process output.
            </param>
            <returns>
            A <see cref="T:System.String"/> array 
            containing the process output stream content by lines.
            </returns>
        </member>
        <member name="T:WGetNET.WinGet">
            <summary>
            The <see cref="T:WGetNET.WinGet"/> class offers informations about the installed winget version.
            </summary>
        </member>
        <member name="P:WGetNET.WinGet.IsInstalled">
            <summary>
            Gets if winget is installed on the system.
            </summary>
            <returns>
            <see langword="true"/> if winget is installed or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="P:WGetNET.WinGet.VersionString">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.String"/> with the version number.
            </returns>
        </member>
        <member name="P:WGetNET.WinGet.Version">
            <summary>
            Gets the version number of the winget installation.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> object.
            </returns>
        </member>
        <member name="M:WGetNET.WinGet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGet"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettings">
            <summary>
            Exports the WinGet settings to a json string.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsAsync">
            <summary>
            Asynchronous exports the WinGet settings to a json string.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the settings json.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsToFile(System.String)">
            <summary>
            Exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull, and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.ExportSettingsToFileAsync(System.String)">
            <summary>
            Asynchronous exports the WinGet settings to a json and writes them to the given file.
            </summary>
            <param name="file">
            The file for the export.
            </param>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetInfo">
            <summary>
            Gets all WinGet related data provided by the WinGet info action.
            </summary>
            <returns>
            A <see cref="T:WGetNET.WinGetInfo"/> object containing winget related information.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.GetInfoAsync">
            <summary>
            Asynchronous gets all WinGet related data provided by the WinGet info action.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:WGetNET.WinGetInfo"/> object containing winget related information.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGet.CheckWinGetVersion(System.Version,System.Version)">
            <summary>
            Checks if the installed WinGet version is between the given versions or the same.
            </summary>
            <remarks>
            If no max version is provided, no upper limit will be set.
            </remarks>
            <param name="minVersion">The min version for the check.</param>
            <param name="maxVersion">The max version for the check.</param>
            <returns>
            <see langword="true"/> if the installed WinGet version matches the check, or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetPackageManager">
            <summary>
            The <see cref="T:WGetNET.WinGetPackageManager"/> class offers methods to manage packages with winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackageManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String,System.Boolean)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackage(System.String,System.String,System.Boolean)">
            <summary>
            Uses the winget search function to search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.Boolean)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.SearchPackageAsync(System.String,System.String,System.Boolean)">
            <summary>
            Uses the winget search function to asynchronously search for a package that maches the given name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages">
            <summary>
            Gets a list of all installed packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String,System.Boolean)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackages(System.String,System.String,System.Boolean)">
            <summary>
            Gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync">
            <summary>
            Asynchronously gets a list of all installed packages.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetInstalledPackagesAsync(System.String,System.String,System.Boolean)">
            <summary>
            Asynchronously gets a list of all installed packages. That match the provided name.
            </summary>
            <param name="packageId">
            The id or name of the package for the search.
            </param>
            <param name="sourceName">
            The name of the source for the search.
            </param>
            <param name="exact">Use exact match.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(System.String)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackage(WGetNET.IWinGetPackage)">
            <summary>
            Install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> for the installation.</param>
            <returns>
            <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(System.String)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for the installation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.InstallPackageAsync(WGetNET.IWinGetPackage)">
            <summary>
            Asynchronously install a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> for the installation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the installation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(System.String)">
            <summary>
            Uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackage(WGetNET.IWinGetPackage)">
            <summary>
            Uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> for the uninstallation.</param>
            <returns>
            <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(System.String)">
            <summary>
            Asynchronously uninsatll a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for uninstallation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UninstallPackageAsync(WGetNET.IWinGetPackage)">
            <summary>
            Asynchronously uninstall a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> for the uninstallation.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the uninstallation was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackages">
            <summary>
            Get all upgradeable packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetUpgradeablePackagesAsync">
            <summary>
            Asynchronously get all upgradeable packages.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(System.String)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for upgrade.</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackage(WGetNET.IWinGetPackage)">
            <summary>
            Upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> that for the upgrade</param>
            <returns>
            <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(System.String)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="packageId">The id or name of the package for upgrade.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradePackageAsync(WGetNET.IWinGetPackage)">
            <summary>
            Asynchronously upgrades a package using winget.
            </summary>
            <param name="package">The <see cref="T:WGetNET.IWinGetPackage"/> that for the upgrade</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the upgrade was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackages">
            <summary>
            Tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.UpgradeAllPackagesAsync">
            <summary>
            Asynchronously tries to upgrade all packages using winget.
            </summary>
            <remarks>
            The action might run succesfully without upgrading every or even any package.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action run successfully or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFile(System.String)">
            <summary>
            Exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            <see langword="true"/> if the export was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ExportPackagesToFileAsync(System.String)">
            <summary>
            Asynchronously exports a list of all installed winget packages as json to the given file.
            </summary>
            <param name="file">The file for the export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the export was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFile(System.String)">
            <summary>
            Imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <returns>
            <see langword="true"/> if the import was compleatly successful or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ImportPackagesFromFileAsync(System.String)">
            <summary>
            Asynchronously imports packages and trys to installes/upgrade all pakages in the list, if possible.
            </summary>
            <remarks>
            This may take some time and winget may not install/upgrade all packages.
            </remarks>
            <param name="file">The file with the package data for the import.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the import was compleatly successful or 
            <see langword="false"/> if some or all packages failed to install.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.String)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Hash(System.IO.FileInfo)">
            <summary>
            Executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.String)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.String"/> containing the path to the file.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashAsync(System.IO.FileInfo)">
            <summary>
            Asynchronously executes the WinGet hash function, to calculate the hash for the given file.
            </summary>
            <param name="file">
            A <see cref="T:System.IO.FileInfo"/> object, of the file the hash should be calculated for.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.String"/> containing the hash.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Unable to find the specified file.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.HashResultToHash(WGetNET.Models.ProcessResult)">
            <summary>
            Reads the hash from the WinGet hash action result.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object of the action.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the hash value.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(System.String,System.String)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(System.String,System.IO.DirectoryInfo)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.Download(WGetNET.IWinGetPackage,System.IO.DirectoryInfo)">
            <summary>
            Downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <returns>
            <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(System.String,System.String)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(System.String,System.IO.DirectoryInfo)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="packageId">The id or name of the package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">Directory path the files will be downloaded to. It will be created if it does not exist.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.DownloadAsync(WGetNET.IWinGetPackage,System.IO.DirectoryInfo)">
            <summary>
            Asynchronously downloads the installer of a package using winget.
            </summary>
            <param name="package">The package to download.</param>
            <param name="directory">
            A <see cref="T:System.IO.DirectoryInfo"/> object of the directory the files will be downloaded to. 
            It will be created if it does not exist.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the download was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetPinnedPackages">
            <summary>
            Gets a list of all pinned packages.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.GetPinnedPackagesAsync">
            <summary>
            Asynchronously gets a list of all pinned packages.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(System.String,System.Boolean)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(System.String,System.String)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(WGetNET.IWinGetPackage,System.Boolean)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAdd(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(System.String,System.String)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(WGetNET.IWinGetPackage,System.Boolean)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddAsync(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Asynchronously adds a pinned package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(System.String,System.Boolean)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(System.String,System.String)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(WGetNET.IWinGetPackage,System.Boolean)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalled(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(System.String,System.Boolean)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(System.String,System.String)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="packageId">The id or name of the package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(WGetNET.IWinGetPackage,System.Boolean)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="blocking">Set to <see langword="true"/> if updating of pinned package should be fully blocked.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinAddInstalledAsync(WGetNET.IWinGetPackage,System.String)">
            <summary>
            Asynchronously adds a pinned installed package to winget.
            </summary>
            <param name="package">The package to pin.</param>
            <param name="version">
            <see cref="T:System.String"/> representing the version to pin. 
            Please refer to the WinGet documentation for more info about version pinning.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the pin was added successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemove(System.String)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemove(WGetNET.IWinGetPackage)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveAsync(System.String)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveAsync(WGetNET.IWinGetPackage)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalled(System.String)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalled(WGetNET.IWinGetPackage)">
            <summary>
            Removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalledAsync(System.String)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="packageId">The id or name of the package to unpin.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.PinRemoveInstalledAsync(WGetNET.IWinGetPackage)">
            <summary>
            Asynchronously removes a pinned package from winget.
            </summary>
            <param name="package">The package to unpin.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the removal of the pin was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ResetPins">
            <summary>
            Resets all pinned packages.
            </summary>
            <remarks>
            This will remove all pins and it is not possible to restore them.
            </remarks>
            <returns>
            <see langword="true"/> if the reset was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackageManager.ResetPinsAsync">
            <summary>
            Asynchronously resets all pinned packages.
            </summary>
            <remarks>
            This will remove all pins and it is not possible to restore them.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the reset was successful or <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            This feature is not supported in the installed WinGet version.
            </exception>
        </member>
        <member name="T:WGetNET.WinGetSourceManager">
            <summary>
            The <see cref="T:WGetNET.WinGetSourceManager"/> class offers methods to manage the sources used by winget.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetSourceManager"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSources">
            <summary>
            Gets a list of all sources that are installed in winget.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSources(System.String)">
            <summary>
            Gets a list of installed sources that matches the provided name.
            </summary>
            <param name="sourceName">Name of the sources to export.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSourcesAsync">
            <summary>
            Asynchronously gets a list of all sources that are installed in winget.
            </summary>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.GetInstalledSourcesAsync(System.String)">
            <summary>
            Asynchronously gets a list of installed sources that matches the provided name.
            </summary>
            <param name="sourceName">Name of the sources to export.</param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/> instances.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.String,System.String,System.String)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(WGetNET.IWinGetSource)">
            <summary>
            Adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> to add.
            </param>
            <returns>
            <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSource(System.Collections.Generic.IEnumerable{WGetNET.IWinGetSource})">
            <summary>
            Adds multiple new sources to winget (Needs administrator rights).
            </summary>
            <param name="sources">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.IWinGetSource"/> objects to add.
            </param>
            <returns>
            <see langword="true"/> if adding all sources was succesfull and <see langword="false"/> if one or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.String,System.String,System.String)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source to add.
            </param>
            <param name="arg">
            A <see cref="T:System.String"/> representing the sources URL or UNC.
            </param>
            <param name="type">
            A <see cref="T:System.String"/> representing the source type.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(WGetNET.IWinGetSource)">
            <summary>
            Asynchronously adds a new source to winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> to add.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was succesfull and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.AddSourceAsync(System.Collections.Generic.IEnumerable{WGetNET.IWinGetSource})">
            <summary>
            Asynchronously adds multiple new sources to winget (Needs administrator rights).
            </summary>
            <remarks>
            The source type is optional but some sources like the "msstore" need it or adding it wil throw an error.
            </remarks>
            <param name="sources">
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.IWinGetSource"/> objects to add.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if adding all sources was succesfull and <see langword="false"/> if one or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSources">
            <summary>
            Updates all sources that are installed in winget.
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the update was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.UpdateSourcesAsync">
            <summary>
            Asynchronously updates all sources that are installed in winget.
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the update was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">The file for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,System.String)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFile(System.String,WGetNET.IWinGetSource)">
            <summary>
            Exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> for the export.
            </param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">The file for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,System.String)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">The file for the export.</param>
            <param name="sourceName">The name of the source for the export.</param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ExportSourcesToFileAsync(System.String,WGetNET.IWinGetSource)">
            <summary>
            Asynchronously exports the winget sources in json format to a file.
            </summary>
            <remarks>
            If the provided file and/or path does not exist, they will be created.
            </remarks>
            <returns>
            The <see cref="T:System.Threading.Tasks.Task"/> for the action.
            </returns>
            <param name="file">
            The file for the export.
            </param>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> for the export.
            </param>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourcesFromJson(System.String)">
            <summary>
            Imports sources into winget from a json string.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for multiple sources.
            </param>
            <returns>
            <see langword="true"/> if importing all sources was successful and <see langword="false"/> if on or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ImportSourcesFromJsonAsync(System.String)">
            <summary>
            Asynchronously imports sources into winget from a json string.
            </summary>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json for multiple sources.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if importing all sources was successful and <see langword="false"/> if on or more failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSources">
            <summary>
            Resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            <see langword="true"/> if the reset was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.ResetSourcesAsync">
            <summary>
            Asynchronously resets all sources that are installed in winget (Needs administrator rights).
            </summary>
            <remarks>
            This may take a while depending on the sources.
            </remarks>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the reset was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(System.String)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <returns>
            <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSources(WGetNET.IWinGetSource)">
            <summary>
            Removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> to remove.
            </param>
            <returns>
            <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(System.String)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> representing the name of the source.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.RemoveSourcesAsync(WGetNET.IWinGetSource)">
            <summary>
            Asynchronously removes a source from winget (Needs administrator rights).
            </summary>
            <param name="source">
            The <see cref="T:WGetNET.IWinGetSource"/> to remove.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the remove was successful or <see langword="false"/> if the it failed.
            </returns>
            <exception cref="T:WGetNET.Exceptions.WinGetNotInstalledException">
            WinGet is not installed or not found on the system.
            </exception>
            <exception cref="T:WGetNET.Exceptions.WinGetActionFailedException">
            The current action failed for an unexpected reason.
            Please see inner exception.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The current user is missing administrator privileges for this call.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSourceManager.SourcesToJson(System.Collections.Generic.IEnumerable{WGetNET.IWinGetSource})">
            <summary>
            Generates a valid json string from the provided sources.
            </summary>
            <param name="sources">
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:WGetNET.IWinGetSource"/> objects.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the generated json.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="T:WGetNET.WinGetAdminOption">
            <summary>
            Represents a winget admin settings entry.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetAdminOption.IsEnabled">
            <summary>
            Gets if the admin setting is enabled.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetAdminOption.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetAdminOption"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="isEnabled">Idicator for the setting state.</param>
        </member>
        <member name="M:WGetNET.WinGetAdminOption.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:WGetNET.WinGetAdminOption"/> instance.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <returns>
            The created <see cref="T:WGetNET.WinGetAdminOption"/> instance or <see langword="null"/> if parsing the data failed.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetDirectory">
            <summary>
            Represents a winget directory in the info set.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Exists">
            <summary>
            Gets a value indicating whether the directory exists.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Name">
            <summary>
            Gets the name of the directory.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.FullName">
            <summary>
            Gets the full path of the directory.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetDirectory.Info">
            <summary>
            Gets the direcory info instance.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetDirectory.#ctor(System.String,System.String,System.Boolean,System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetDirectory"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="directoryInfo"><see cref="T:System.IO.DirectoryInfo"/> instance that was created from the raw content.</param>
        </member>
        <member name="M:WGetNET.WinGetDirectory.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:WGetNET.WinGetDirectory"/> instance.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <returns>
            The created <see cref="T:WGetNET.WinGetDirectory"/> instance or <see langword="null"/> if parsing the data failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetDirectory.CreateDirectoryInfo(System.String,System.Boolean)">
            <summary>
            Creates and returns a <see cref="T:System.IO.DirectoryInfo"/> instance from the content of the class.
            </summary>
            <returns>
            The created <see cref="T:System.IO.DirectoryInfo"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetDirectory.TrimLastDirectory(System.String)">
            <summary>
            Removes the last directory from the given path.
            </summary>
            <param name="path">
            <see cref="T:System.String"/> containing the path that sould be trimed.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the trimed path.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetInfo">
            <summary>
            Represents winget related information.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.VersionString">
            <summary>
            Gets the version number of the winget installation as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Version">
            <summary>
            Gets the version number of the winget installation.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Directories">
            <summary>
            Gets a collection of the winget direcories.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Links">
            <summary>
            Gets a collection of the winget related links.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.AdminSetting">
            <summary>
            Gets a collection of the winget admin setting states.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetInfo.Empty">
            <summary>
            Gets an empty instance of this object.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetInfo.#ctor(System.String,System.Collections.Generic.List{WGetNET.WinGetDirectory},System.Collections.Generic.List{WGetNET.WinGetLink},System.Collections.Generic.List{WGetNET.WinGetAdminOption})">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetInfo"/> class.
            </summary>
            <param name="version">The installed winget version.</param>
            <param name="directories">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing the WinGet directories.
            </param>
            <param name="links">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing WinGet related links.
            </param>
            <param name="adminSetting">
            <see cref="T:System.Collections.Generic.List`1"/> of info entries containing the WinGet admin setting states.
            </param>
        </member>
        <member name="T:WGetNET.WinGetLink">
            <summary>
            Represents a winget link in the info set.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetLink.Url">
            <summary>
            Gets the url.
            </summary>
        </member>
        <member name="M:WGetNET.WinGetLink.#ctor(System.String,System.String,System.Boolean,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetLink"/> class.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <param name="hasShortenedContent">Sets if the content is shortened or not.</param>
            <param name="url"><see cref="T:System.Uri"/> instance containing the url.</param>
        </member>
        <member name="M:WGetNET.WinGetLink.Create(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:WGetNET.WinGetLink"/> instance.
            </summary>
            <param name="entryName">The name of the settings entry.</param>
            <param name="rawContent">The content of the settings entry.</param>
            <returns>
            The created <see cref="T:WGetNET.WinGetLink"/> instance or <see langword="null"/> if parsing the data failed.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetLink.CreateUri(System.String,System.Boolean)">
            <summary>
            Creates and returns a <see cref="T:System.Uri"/> instance from the content of the class.
            </summary>
            <returns>
            The created <see cref="T:System.Uri"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetLink.TrimLastUriPart(System.String)">
            <summary>
            Removes the last part from the given URI.
            </summary>
            <param name="uri">
            <see cref="T:System.String"/> containing the URI that sould be trimed.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing the trimed URI.
            </returns>
        </member>
        <member name="T:WGetNET.WinGetPackage">
            <summary>
            Represents a winget package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPackage.Name">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.Id">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.VersionString">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.Version">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.AvailableVersionString">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.AvailableVersion">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.SourceName">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.HasShortenedId">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.HasNoId">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPackage.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
            <remarks>
            A package object counts as empty if it does not contain a id and name.
            Because the rest of the information is useless in this state.
            </remarks>
        </member>
        <member name="M:WGetNET.WinGetPackage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
        </member>
        <member name="M:WGetNET.WinGetPackage.#ctor(System.String,System.String,System.Version,System.Version,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
        </member>
        <member name="M:WGetNET.WinGetPackage.#ctor(System.String,System.String,System.String,System.Version,System.String,System.Version,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="versionString">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="availableVersionString">Heighest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package as a <see cref="T:System.String"/>. It will also be used for the available version.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id of the package is shortend or not.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="availableVersion">The highest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id of the package is shortend or not.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.Version,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package. It will also be used for the available version.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id of the package is shortend or not.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Create(System.String,System.String,System.Version,System.Version,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetPackage"/> class and returns it.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">The highest available version of the package.</param>
            <param name="sourceName">The name of the source the package comes from.</param>
            <param name="hasShortenedId">Sets if the id of the package is shortend or not.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetPackage"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetPackage.Equals(WGetNET.WinGetPackage)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetPackage.Clone">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetPackage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetPinnedPackage">
            <summary>
            Represents a winget pinned package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinTypeString">
            <summary>
            Gets the pin type of the package as a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinnedVersion">
            <summary>
            Gets the pinned version or version range.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.PinType">
            <summary>
            Gets the pin type of the package.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.Name">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.Id">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.VersionString">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.Version">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.AvailableVersionString">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.AvailableVersion">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.SourceName">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.HasShortenedId">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.HasNoId">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetPinnedPackage.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
            <remarks>
            A package object counts as empty if it does not contain a id and name.
            Because the rest of the information is useless in this state.
            </remarks>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPinnedPackage"/> class.
            </summary>
            <param name="pinType">Name of the winget pin type for the package.</param>
            <param name="pinnedVersion"><see cref="T:System.String"/> containing the pinned version for the package.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.#ctor(System.String,System.String,System.String,System.String,System.String,System.Version,System.String,System.Version,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetPinnedPackage"/> class.
            </summary>
            <param name="pinType">Name of the winget pin type for the package.</param>
            <param name="pinnedVersion"><see cref="T:System.String"/> containing the pinned version for the package.</param>
            <param name="hasShortenedId">Sets if the id is shortened or not.</param>
            <param name="name">The name of the package.</param>
            <param name="id">The id of the package.</param>
            <param name="versionString">The current version of the package as a <see cref="T:System.String"/>.</param>
            <param name="version">The current version of the package.</param>
            <param name="availableVersionString">Heighest available version of the package as a <see cref="T:System.String"/>.</param>
            <param name="availableVersion">Heighest available version of the package.</param>
            <param name="sourceName">Name of the source the package comes from.</param>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.Equals(WGetNET.WinGetPinnedPackage)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.Clone">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetPinnedPackage.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.WinGetSource">
            <summary>
            Represents a winget source.
            </summary>
        </member>
        <member name="P:WGetNET.WinGetSource.Name">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetSource.Arg">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetSource.Type">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetSource.Data">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetSource.Identifier">
            <inheritdoc/>
        </member>
        <member name="P:WGetNET.WinGetSource.IsEmpty">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetSource.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="type">Type identifier of the source.</param>
            <param name="data">Data of the source source. This field is only used by some sources.</param>
            <param name="identifier">The identifier of the package</param>
        </member>
        <member name="M:WGetNET.WinGetSource.Create(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetSource"/> class and returns it.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="identifier">The identifier of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="type">The type identifier for the source.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSource.Create(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:WGetNET.WinGetSource"/> class and returns it.
            </summary>
            <param name="name">The name of the source.</param>
            <param name="identifier">The identifier of the source.</param>
            <param name="arg">The URL or UNC of the source.</param>
            <param name="type">The type identifier for the source.</param>
            <param name="data">The data field of the source.</param>
            <returns>
            The created instance of the <see cref="T:WGetNET.WinGetSource"/> class.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            A provided argument is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.WinGetSource.FromSourceModel(WGetNET.Models.SourceModel)">
            <summary>
            Creates a <see cref="T:WGetNET.WinGetSource"/> instance from a <see cref="T:WGetNET.Models.SourceModel"/> instance.
            </summary>
            <param name="model">The <see cref="T:WGetNET.Models.SourceModel"/> instance.</param>
            <returns>
            The created <see cref="T:WGetNET.WinGetSource"/> instance.
            </returns>
        </member>
        <member name="M:WGetNET.WinGetSource.Equals(WGetNET.WinGetSource)">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetSource.Clone">
            <inheritdoc/>
        </member>
        <member name="M:WGetNET.WinGetSource.ToString">
            <inheritdoc/>
        </member>
        <member name="T:WGetNET.InfoActionVersionId">
            <summary>
            Defines identifiers for all version ranges that generate a different output when using "winget --info".
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange1">
            <summary>
            First WinGet version to version 1.4.3132
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange2">
            <summary>
            Version 1.4.3531 to version 1.5.101
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange3">
            <summary>
            Version 1.5.441
            </summary>
        </member>
        <member name="F:WGetNET.InfoActionVersionId.VersionRange4">
            <summary>
            Version 1.5.1081 to newest version
            </summary>
        </member>
        <member name="T:WGetNET.PinType">
            <summary>
            Enum of winget pin types.
            </summary>
        </member>
        <member name="F:WGetNET.PinType.Pinning">
            <summary>
            The package is pinned.
            </summary>
            <remarks>
            Package can't be updatet automatically.
            </remarks>
        </member>
        <member name="F:WGetNET.PinType.Blocking">
            <summary>
            The package is blocked.
            </summary>
            <remarks>
            Package can't be updatet automatically and manually.
            </remarks>
        </member>
        <member name="F:WGetNET.PinType.Gating">
            <summary>
            The package is gated.
            </summary>
            <remarks>
            Package can't be updated to versions, that are not contained in the provided pinned version.
            </remarks>
        </member>
        <member name="T:WGetNET.Exceptions.InvalidJsonException">
            <summary>
            Exception that gets thrown if the provided json string could not be deserialized.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.InvalidJsonException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.InvalidJsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.InvalidJsonException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Exceptions.WinGetActionFailedException">
            <summary>
            Exception that gets thrown if a winget action failed.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.WinGetActionFailedException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="action">The winget action that was executed</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="action">The winget action that was executed</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetActionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetActionFailedException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException">
            <summary>
            Exception that gets thrown if a winget feature is not supportet in the installed winget version.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.WinGetFeatureNotSupportedException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class.
            </summary>
            <param name="minVersion">Min WinGet version needed for the feature</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Version,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class.
            </summary>
            <param name="minVersion">Min WinGet version needed for the feature</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetFeatureNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetFeatureNotSupportedException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="T:WGetNET.Exceptions.WinGetNotInstalledException">
            <summary>
            Exception that gets thrown if winget is not installed.
            </summary>
        </member>
        <member name="P:WGetNET.Exceptions.WinGetNotInstalledException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class.
            </summary>
            <param name="message">Message of the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:WGetNET.Exceptions.WinGetNotInstalledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Exceptions.WinGetNotInstalledException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> 
            that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> 
            that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:WGetNET.HelperClasses.ArgsHelper.ThrowIfStringIsNullOrWhiteSpace(System.String,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if the given string is <see langword="null"/> or empty/whitespace.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The given string is null or empty/whitespace.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.ArgsHelper.ThrowIfObjectIsNull(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if the given object is <see langword="null"/>.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The given object is <see langword="null"/>
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.ArgsHelper.ThrowIfWinGetObjectIsNullOrEmpty(WGetNET.IWinGetObject,System.String)">
            <summary>
            Throws a <see cref="T:System.ArgumentNullException"/> if the given winget object is <see langword="null"/> or empty.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <param name="name">
            The name of the arument.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The given winget object is null or empty.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.ArgsHelper.ThrowIfPathIsInvalid(System.String)">
            <summary>
            Throws one of the listet exception if the path is invalid or cant be accessed.
            </summary>
            <param name="arg">
            The argument to check.
            </param>
            <exception cref="T:System.ArgumentException">
            The path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory root does not exist.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:WGetNET.HelperClasses.ArrayManager">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.ArrayManager"/> class,
            provieds methods to manage <see langword="array"/>'s.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.Add``1(``0[],``0)">
            <summary>
            Adds a new entry to a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="value">
            The value to add to the <see langword="array"/>.
            </param>
            <returns>
            The <see langword="array"/> with the added entry.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.RemoveRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Removes a range of entrys from a <see langword="array"/>.
            </summary>
            <typeparam name="T">
            The type of the <see langword="array"/>.
            </typeparam>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="index">
            A <see cref="T:System.Int32"/> representing the zero based start index.
            </param>
            <param name="count">
            A <see cref="T:System.Int32"/> representing the number of elements to remove.
            </param>
            <returns>
            The <see langword="array"/> with the range of entrys removed.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.GetEntryContains(System.String[],System.String)">
            <summary>
            Searches for an entry in a <see langword="array"/> that contains the given string.
            </summary>
            <param name="inputArray">
            The input <see langword="array"/>.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> representing the value to check for.
            </param>
            <returns>
            A <see cref="T:System.Int32"/> representing the index of the entry (-1 if the entry is not found).
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.RemoveEmptyEntries(System.String[])">
            <summary>
            Removes empty entries from a <see langword="array"/> of <see cref="T:System.String"/>'s.
            </summary>
            <param name="inputArray">The input <see langword="array"/>.</param>
            <returns>
            The <see langword="array"/> with empty entries removed.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ArrayManager.CopyToWithoutRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Copys a <see langword="array"/> to a new one, but ignores the given range.
            </summary>
            <typeparam name="T">
            The type of the array.
            </typeparam>
            <param name="inputArray">
            The <see langword="array"/> that should be copyed.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int32"/> representing a start index of the range that should be ignored.
            </param>
            <param name="count">
            A <see cref="T:System.Int32"/> representing the range that should be ignored.
            </param>
            <returns>
            The new <see langword="array"/>.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.ExportOutputToFile(System.String,WGetNET.Models.ProcessResult)">
            <summary>
            Writes the export result to a file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> containing the file path and name.
            </param>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object containing the export data.
            </param>
            <returns>
            <see langword="true"/> if the action was successful and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.ExportOutputToFileAsync(System.String,WGetNET.Models.ProcessResult)">
            <summary>
            Asynchronous writes the export result to a file.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> containing the file path and name.
            </param>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object containing the export data.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            The result is <see langword="true"/> if the action was successful and <see langword="false"/> if it failed.
            </returns>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.WriteTextToFile(System.String,System.String)">
            <summary>
            Writes the provided text to the given file.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The root of the specified path is invalid.
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.FileHandler.WriteTextToFileAsync(System.String,System.String)">
            <summary>
            Asyncounes writes the provided text to the given file.
            </summary>
            <param name="path">The file path.</param>
            <param name="text">The text to write to the file.</param>
            <exception cref="T:System.ArgumentException">
            Path contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars"/>.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive).
            </exception>
            <exception cref="T:System.IO.IOException">
            An I/O error occurred while opening the file
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            Path specified a file that is read-only. 
            Or Path specified a file that is hidden.
            Or This operation is not supported on the current platform. 
            Or Path specified a directory. 
            Or The caller does not have the required permission.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Path is in an invalid format.
            </exception>
            <exception cref="T:System.Security.SecurityException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="T:WGetNET.HelperClasses.JsonHandler">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.JsonHandler"/> class,
            provieds methods handle json actions.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.JsonHandler.StringToObject``1(System.String)">
            <summary>
            Deserializes a given json <see cref="T:System.String"/> to a object of the given class.
            </summary>
            <typeparam name="T">
            Class type the json should be deserialized to.
            </typeparam>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json to deserialize.
            </param>
            <returns>
            Object of the given class type.
            </returns>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.JsonHandler.StringToObjectAsync``1(System.String)">
            <summary>
            Asynchronously deserializes a given json <see cref="T:System.String"/> to a object of the given class.
            </summary>
            <typeparam name="T">
            Class type the json should be deserialized to.
            </typeparam>
            <param name="jsonString">
            A <see cref="T:System.String"/> containing the json to deserialize.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/>, containing the result.
            Object of the given class type.
            </returns>
            <exception cref="T:WGetNET.Exceptions.InvalidJsonException">
            The provided JSON could not be deserialized.
            </exception>
        </member>
        <member name="M:WGetNET.HelperClasses.JsonHandler.GetJson(System.Object)">
            <summary>
            Serializes a json <see cref="T:System.String"/> from the provided object.
            </summary>
            <param name="input">The object to serialize.</param>
            <returns>
            A <see cref="T:System.String"/> containing the generated json.
            </returns>
        </member>
        <member name="T:WGetNET.HelperClasses.PrivilegeChecker">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.PrivilegeChecker"/> class,
            provides methods for checking user privileges.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.PrivilegeChecker.CheckAdministratorPrivileges">
            <summary>
            Check if the current user has administrator privileges.
            </summary>
            <returns>
            <see langword="true"/> if the current user has administrator privileges and
            <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.PrivilegeChecker.CurrentUserIsAdmin">
            <summary>
            Checks if the current user is an administrator.
            </summary>
            <returns>
            <see langword="true"/> if the user is a admin and <see langword="false"/> if not.
            </returns>
        </member>
        <member name="T:WGetNET.HelperClasses.ProcessOutputReader">
            <summary>
            The <see langword="static"/> <see cref="T:WGetNET.HelperClasses.ProcessOutputReader"/> class,
            provieds <see langword="static"/> methodes to process the output of the winget processes.
            </summary>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToPackageList(System.String[],WGetNET.PackageAction,System.String)">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </summary>
            <param name="output">
            A <see cref="T:System.Collections.Generic.List`1"/> of output lines from a winget process.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.CreatePackageListFromOutput(System.String[],System.Int32[],WGetNET.PackageAction,System.String)">
            <summary>
            Creates a package list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <param name="action">
            Sets info about the action that is executet.
            </param>
            <param name="sourceName">
            Name of the source used in the search or list by source action.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToPinnedPackageList(System.String[])">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process to a list of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </summary>
            <param name="output">
            The <see langword="array"/> of output lines from a winget process.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.CreatePinnedPackageListFromOutput(System.String[],System.Int32[])">
            <summary>
            Creates a pinned package list from output.
            </summary>
            <param name="output">
            The <see langword="array"/> containing the output.
            </param>
            <param name="columnList">
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetPinnedPackage"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToSourceList(System.String[])">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.List`1"/> 
            of output lines from a winget process, that contains the sources in json format, to a list of <see cref="T:WGetNET.WinGetSource"/>'s.
            </summary>
            <param name="output">
            The <see langword="array"/> of output lines from a winget process.
            </param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetSource"/>'s.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ToWingetInfo(System.String[],WGetNET.InfoActionVersionId)">
            <summary>
            Creates a <see cref="T:WGetNET.WinGetInfo"/> object from the winget output.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="actionVersionId">Containes info about the winget version range for the output.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadVersionFromData(System.String[])">
            <summary>
            Reads the version number from the winget info output.
            </summary>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDataByRange(System.String[],WGetNET.InfoActionVersionId)">
            <summary>
            Initializes the reading of the data for the specific version range.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="actionVersionId">Containes info about the winget version range for the output.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDataForRange1(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDataForRange2(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDataForRange3(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDataForRange4(System.String[])">
            <summary>
            Reads the data from the winget info output for the version range 1.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            The <see cref="T:WGetNET.WinGetInfo"/> object created from the output.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadSingleDirectoryEntry(System.String[],System.Int32)">
            <summary>
            Reads a single directory entry from the winget info output.
            </summary>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <param name="index">The index of the directory entry.</param>
            <returns>
            A <see cref="T:WGetNET.WinGetDirectory"/> instance if the action was successful, or null if it failed. 
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadDirectories(System.String[])">
            <summary>
            Reads all directories from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first directory entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetDirectory"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadLinks(System.String[])">
            <summary>
            Reads all links from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first link entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetLink"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ReadAdminSettings(System.String[])">
            <summary>
            Reads all admin options from the winget info output.
            </summary>
            <remarks>
            The first output entry needs to be the first admin option entry.
            </remarks>
            <param name="output">The <see langword="array"/> containing the winget output lines.</param>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:WGetNET.WinGetAdminOption"/> objects.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.ExportOutputToString(WGetNET.Models.ProcessResult)">
            <summary>
            Writes the export result to a <see cref="T:System.String"/>.
            </summary>
            <param name="result">
            The <see cref="T:WGetNET.Models.ProcessResult"/> object containing the export data.
            </param>
            <returns>
            The <see cref="T:System.String"/> containing the export result.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.CheckShortenedValue(System.String)">
            <summary>
            Checks if the given value is possibly shortened.
            </summary>
            <returns>
            <see langword="true"/> if the value is shortened or <see langword="false"/> if not.
            </returns>
        </member>
        <member name="M:WGetNET.HelperClasses.ProcessOutputReader.GetColumnList(System.String,System.Boolean)">
            <summary>
            Gets all column start indexes from the input line.
            </summary>
            <param name="line">
            A <see cref="T:System.String"/> containing the header, for column calculation.
            </param>
            <param name="isPinnedPackageTable">Activate workaround for the pinned package list.</param>
            <returns>
            A <see cref="T:System.Int32"/> <see langword="array"/> containing the column start indexes.
            </returns>
        </member>
        <member name="T:WGetNET.IWinGetObject">
            <summary>
            Interface for all winget related objects.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetObject.IsEmpty">
            <summary>
            Gets if the object is empty.
            </summary>
        </member>
        <member name="T:WGetNET.IWinGetPackage">
            <summary>
            Represents a winget package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.Name">
            <summary>
            Gets the name of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.Id">
            <summary>
            Gets the id of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.VersionString">
            <summary>
            Gets the version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.Version">
            <summary>
            Gets the version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.AvailableVersionString">
            <summary>
            Gets the newest available version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.AvailableVersion">
            <summary>
            Gets the newest available version of the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.SourceName">
            <summary>
            Gets the source name for the package.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.HasShortenedId">
            <summary>
            Gets if id of the package is shortened.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetPackage.HasNoId">
            <summary>
            Gets if the package does not provide an id.
            </summary>
            <remarks>
            If this is true somthing whent wrong in the creation of the package.
            The name of the package will be used for all actions performd with this package.
            </remarks>
        </member>
        <member name="T:WGetNET.IWinGetSource">
            <summary>
            Represents a winget source.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetSource.Name">
            <summary>
            Gets the name of the source.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetSource.Arg">
            <summary>
            Gets the URL/UNC of the source.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetSource.Type">
            <summary>
            Gets the type of the source.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetSource.Data">
            <summary>
            Gets the data of the source.
            </summary>
        </member>
        <member name="P:WGetNET.IWinGetSource.Identifier">
            <summary>
            Gets the identifier of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.ExitCode">
            <summary>
            Gets or sets the exit code of the process.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.Output">
            <summary>
            Gets or sets the output of the process.
            </summary>
        </member>
        <member name="P:WGetNET.Models.ProcessResult.Success">
            <summary>
            Gets if the process finished successfully.
            </summary>
        </member>
        <member name="T:WGetNET.Models.SourceModel">
            <summary>
            Represents a winget source for json parsing.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Name">
            <summary>
            Gets or sets the name of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Arg">
            <summary>
            Gets or sets the arg of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Type">
            <summary>
            Gets sets the type of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Data">
            <summary>
            Gets or sets the data of the source.
            </summary>
        </member>
        <member name="P:WGetNET.Models.SourceModel.Identifier">
            <summary>
            Gets or sets the identifier of the source.
            </summary>
        </member>
        <member name="M:WGetNET.Models.SourceModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WGetNET.Models.SourceModel"/> class.
            </summary>
        </member>
    </members>
</doc>
